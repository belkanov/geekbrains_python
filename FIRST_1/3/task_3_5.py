"""
Реализовать функцию get_jokes(), возвращающую n шуток, сформированных из трех случайных слов, взятых из трёх списков (по одному из каждого):
    nouns = ["автомобиль", "лес", "огонь", "город", "дом"]
    adverbs = ["сегодня", "вчера", "завтра", "позавчера", "ночью"]
    adjectives = ["веселый", "яркий", "зеленый", "утопичный", "мягкий"]

Например:
     get_jokes(2)
    ["лес завтра зеленый", "город вчера веселый"]

Документировать код функции.
Сможете ли вы добавить еще один аргумент — флаг, разрешающий или запрещающий повторы слов в шутках (когда каждое слово можно использовать только в одной шутке)?
Сможете ли вы сделать аргументы именованными?
"""
from random import choice


# формат докстрингов: Google
# https://google.github.io/styleguide/pyguide.html#doc-function-args
def get_jokes(count=5, unique=False):
    """возвращает n шуток, сформированных из трех случайных слов, взятых из трёх списков (по одному из каждого):

    Args:
        count: кол-во шуток
        unique: можно или нет повторять слова в шутках
    """

    nouns = ["автомобиль", "лес", "огонь", "город", "дом"]
    adverbs = ["сегодня", "вчера", "завтра", "позавчера", "ночью"]
    adjectives = ["веселый", "яркий", "зеленый", "утопичный", "мягкий"]
    rslt = []

    if unique and count > len(nouns):
        return 'Столько шуток не получится =( ' \
               f'\nНадо задать не больше {len(nouns)}'

    for _ in range(count):
        noun, adv, adj = choice(nouns), choice(adverbs), choice(adjectives)
        if unique:
            # можно конечно через вхождение, но если списки будут большие, и надо будет сделать n ~ len(nouns) шуток
            # то под конец рандомом мы можем вечность тыкаться и не попадать на уникальные
            # поэтому решил удалять несмотря на О(n)
            nouns.remove(noun)
            adverbs.remove(adv)
            adjectives.remove(adj)
        rslt.append(' '.join((noun, adv, adj)))
    return rslt


print(get_jokes(5, unique=True))
