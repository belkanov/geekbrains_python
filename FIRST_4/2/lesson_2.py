from random import randint


def inpt(text, inpt_str):
    """
    на случай если появится желание проверить и вводить даные руками
    сделайте is_input_enable = True

    в остальных случаях будем работать с заготовленной строкой inpt_str

    просто для удобства)
    """

    is_input_enable = False
    if is_input_enable:
        rslt = input(text)
    else:
        rslt = inpt_str
    return rslt.split()


def part_1():
    print('# 1. Написать программу, которая будет складывать, вычитать, умножать или делить два числа.')
    #    Числа и знак операции вводятся пользователем. После выполнения вычисления программа не должна завершаться,
    #    а должна запрашивать новые данные для вычислений. Завершение программы должно выполняться при вводе символа '0' в качестве знака операции.
    #    Если пользователь вводит неверный знак (не '0', '+', '-', '*', '/'), то программа должна сообщать ему об ошибке и снова запрашивать знак операции.
    #    Также сообщать пользователю о невозможности деления на ноль, если он ввел 0 в качестве делителя.

    while True:
        n1, op, n2 = input('Введите выражение (например 5 * 3) для вычисления: ').split()
        n1, n2 = int(n1), int(n2)
        if op == '0':
            print('Завершаем выполнение.')
            break
        elif op == '+':
            print(f'= {n1+n2}')
        elif op == '-':
            print(f'= {n1-n2}')
        elif op == '*':
            print(f'= {n1*n2}')
        elif op == '/':
            if not n2:
                print('На 0 делить нельзя')
            else:
                print(f'= {n1/n2}')
        else:
            print(f'Не распознана операция "{op}". Повторите попытку')

    print()


def part_2(s):
    print('# 2. Посчитать четные и нечетные цифры введенного натурального числа.')
    #    Например, если введено число 34560, то у него 3 четные цифры (4, 6 и 0) и 2 нечетные (3 и 5).

    # здесь и далее я перевожу ввод пользователя в число намеренно.
    # работаем все таки с числом. и не всегда это число будет идти от пользователя, возможно какието вычисления в коде и т.д.
    n = int(*inpt('Введите натуральное число', s))

    odd_cnt = sum((1 for c in str(n) if int(c) % 2 != 0))
    print(f'Для числа {n}: {odd_cnt} - кол-во нечетных; {len(str(n))-odd_cnt} - кол-во четных')

    print()


def part_3(s):
    print('# 3. Сформировать из введенного числа обратное по порядку входящих в него цифр и вывести на экран.')
    #    Например, если введено число 3486, то надо вывести число 6843.

    n = int(*inpt('Введите натуральное число', s))

    # будем считать этой краткой записью for i in range(len(str(n))-1, -1, -1):
    print(f'Обратное число для числа {n}: {str(n)[::-1]}')

    print()


def part_4(s):
    print('# 4. Найти сумму n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125 ...Количество элементов (n) вводится с клавиатуры.')

    n = int(*inpt('Введите количество элемнтов для вычисления следующего ряда чисел: 1 -0.5 0.25 -0.125 ...', s))

    def gen_elem(n):
        rslt = 1
        for i in range(n):
            yield rslt
            rslt /= -2

    rslt = sum(v for v in gen_elem(n))
    print(f'Сумма {n} элементов = {rslt}')

    print()


def part_5():
    print('# 5. Вывести на экран коды и символы таблицы ASCII, начиная с символа под номером 32 и заканчивая 127-м включительно.')
    #    Вывод выполнить в табличной форме: по десять пар "код-символ" в каждой строке.

    rslt = (f'{i:>3} - {chr(i)}{chr(10) if i>32 and (11-i)%10==0 else "  "}' for i in range(32, 128))
    print(''.join(rslt))

    print()


def part_6():
    # 6. В программе генерируется случайное целое число от 0 до 100. Пользователь должен его отгадать не более чем за 10 попыток.
    #    После каждой неудачной попытки должно сообщаться больше или меньше введенное пользователем число, чем то, что загадано.
    #    Если за 10 попыток число не отгадано, то вывести загаданное число.

    x = randint(0, 100)
    max_try = 10
    y = int(input(f'# 6. Угадайте число от 0 до 100. У Вас {max_try} попыток: '))
    max_try -= 1
    for i in range(max_try):
        if y == x:
            print('Угадали!')
            break
        elif y < x:
            y = int(input(f'Неверно. Число больше. Осталось попыток: {max_try-i}. Угадайте число: '))
        else:
            y = int(input(f'Неверно. Число меньше. Осталось попыток: {max_try-i}. Угадайте число: '))
    else:
        print(f'К сожалению Вы не угадали. Было загадано число {x}')

    print()


def part_7(s):
    print('# 7. Напишите программу, доказывающую или проверяющую, что для множества натуральных чисел выполняется равенство: 1+2+...+n = n(n+1)/2, где n - любое натуральное число.')

    def f(n):
        if n == 1:
            return 1
        else:
            return n+f(n-1)

    n = int(*inpt('Введите число: ', s))
    if (tmp := f(n)) == n*(n+1)/2:
        print(f'Для числа {n} утверждение # 7 ВЕРНО (сумма чисел = {tmp})')
    else:
        print(f'Для числа {n} утверждение # 7 НЕ ВЕРНО')

    print()


def part_8(s):
    print('# 8. Посчитать, сколько раз встречается определенная цифра в введенной последовательности чисел.')
    #    Количество вводимых чисел и цифра, которую необходимо посчитать, задаются вводом с клавиатуры.

    # если разделить ввод на две части, то избавимся от массива в nums (вместно него будет итератор), но он нужен в конце для вывода
    # хотя можно просто не выводить =)
    n, *nums = map(int, inpt('Введите цифру и последовательность чисел для подсчета этой цифры', s))
    n = str(n)
    
    # todo переделать в однострочный
    rslt = sum((1 for v in nums for c in str(v) if n == c))
    print(f'Для чисел {nums} цифра {n} встречается {rslt} раз')

    print()


def part_9(s):
    print('# 9. Среди натуральных чисел, которые были введены, найти наибольшее по сумме цифр. Вывести на экран это число и сумму его цифр.')

    # массив тут только затем, чтобы получить доступ к последовательности после цикла
    nums = [*map(int, inpt('Введите натуральные числа: ', s))]
    max_num = 0
    sum_num = 0
    for v in nums:
        if (tmp := sum(map(int, str(v)))) > sum_num:
            sum_num = tmp
            max_num = v
    print(f'Для последовательности чисел {nums} максимальное число по сумме его цифр - {max_num} (сумма - {sum_num})')

    print()


def main():
    part_1()
    part_2('34560')
    part_3('3486')
    part_4('400')
    part_5()
    part_6()
    part_7('6')
    part_8('1 11 21 33 101')  # 5
    part_9('0 6 1 11 111 1111 11111')


if __name__ == '__main__':
    main()
