// 1. Для практикума из занятия 7 продумать, где можно применить замыкания.

// как-то не нашел особых поводов вводить замыкания.
// Наверное потому, что я привык их рассматривать как в питоне.
// Там это называется декораторами и через них обычно вводят какой-то доп. функционал:
//  - кэширование вывода
//  - логирование
//  - передачу контекста
//  - какие-либо проверки (например пользователь должен быть админом)
//  - ...
//
// Под замыкания можно передалть большую часть кода, где в функциях есть объявление переменных.
// При этом логику запихать во вложенную функцию и получим функции со своим окружением



// 2. Не выполняя кода, ответить, что выведет браузер и почему:
// я это рассматриваю как отдельные вызовы

if (!("a" in window)) {
    var a = 1;
}
alert(a);
// выведет undefined.
// из-за var будет всплытие А и поэтому мы не попадем в тело условия
// => не будет присваивания

var b = function a(x) {
    x && a(--x);
};
alert(a);
// тут скорее всего будет ошибка, т.к. мы определили b,
// но у нас нет чистого объявления А:
// браузер не найдет объявления А, начнет выполнять код и
// в процеесе создаст функцию с именем b.

function a(x) {
    return x * 2;
}
var a;
alert(a);
// здесь будет вывод кода функции (как функциональная переменная)
// браузер найдет объявление функции А, создаст под нее переменную
// далее снова объявление А (var a), которое не вносит ничего нового
//
// вот если бы было var a = 1;
// тогда на алерте поулчили бы "1";

function b(x, y, a) {
    arguments[2] = 10;
    alert(a);
}
b(1, 2, 3);
// здесь будет вывод 10
// потому что через arguments мы получаем доступ ко всем переданным параметрам,
// меняем значение третьего параметра (он же А) и в итоге его и выводим

function a() {
    alert(this);
}
a.call(null);
// тут будет вывод объекта window:
// call определяет первым параметром значение this,
// а т.к. передаем null, то идет объект по-умолчанию (window)